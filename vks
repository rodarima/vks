#!/usr/bin/env python3

# "Human knowledge belongs to the world."

import sys
import urllib.parse
import urllib.request
import json
import base64

# Results per page
MAX_SONGS = 20

def usage():
	print('Cliente de b√∫squeda de canciones en VK. Uso:')
	print(sys.argv[0] + ' <palabras>')
	sys.exit(1)

def get_keywords():
	if len(sys.argv) != 2:
		usage()

	return sys.argv[1]

def search(keywords, i):

	count = MAX_SONGS
	offset = i * count

	#Encode string for url
	string = urllib.parse.quote(keywords)

	#Hide token from search engines, and for the lazy :-o
	token = base64.b64decode(b'\
NWNkNTBmMTJlNThhNGJjYTQzNzc2NDUyNWJmYjMyNGEwYzE0ZTYyMTBlZTQ\
4MGRmMDliZTlmZmRmYzViMTIyMTU4YTA3YjE1MWZmMDNjNjQ5NjUwYQ=='\
).decode('utf-8')

	url = 'https://api.vk.com/method/audio.search.json?q=' + \
		string + '&access_token='+token+'&auto_complete=0&v=3.0&' + \
		'test_mode=0&count={}&offset={}'.format(count, offset)

	f = urllib.request.urlopen(url)

#	print(f.read())
	return f.read()

def parse(byte_array):
	s = byte_array.decode('utf-8')
	dict_data = json.loads(s)

	response = dict_data['response']
	songs = response[1:]
	return songs

def url_parse(url):
	pr = urllib.parse.urlparse(url)
	#Remove query
	new_url = \
		urllib.parse.urlunparse((pr.scheme, pr.netloc, pr.path, '', '', ''))

	return new_url


def print_songs(songs):
	list_songs = []
	max_artist = 0
	max_title = 0
	max_url = 0

	#Do not exceed line length with long title or artist name
	cut_title = 40
	cut_artist = 30
	for song in songs:
		artist = song['artist']
		title = song['title']
		url = url_parse(song['url'])
#		print(url + '\t' + artist + '\t' + title)

		if len(artist) > max_artist: max_artist = len(artist)
		if len(title) > max_title: max_title = len(title)
		if len(url) > max_url: max_url = len(url)

		list_songs.append((artist, title, url))

	if max_artist > cut_artist: max_artist = cut_artist
	if max_title > cut_title: max_title = cut_title

	for song in songs:
		artist = song['artist']
		title = song['title']
		url = url_parse(song['url'])

		if len(artist) > max_artist: artist = artist[0:max_artist-3] + '...'
		if len(title) > max_title: title = title[0:max_title-3] + '...'

		s = "{url:<{fill_url}}  {title:>{fill_title}}  -  {artist}".format(
			url=url,fill_url=max_url,title=title,fill_title=max_title,artist=artist)
		print(s)

def loop_search(keywords):

	i = 0

	while True:
		b = search(keywords, i)
		songs = parse(b)

		if songs == []: break
		print_songs(songs)

		if len(songs) < MAX_SONGS: break

		more = input("More? (Y/n): ")
		if more.lower() == 'n': break

		i+=1


def main():
	k = get_keywords()
	loop_search(k)

main()
